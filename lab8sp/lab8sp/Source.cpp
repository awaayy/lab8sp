#include <iostream>
#include <vector>
#include <stdexcept>
#include <algorithm>

using namespace std;

// Структура для хранения данных о туре
struct Tour {
    string destination;
    int duration;
    double price;
    int groupSize;
};

// Класс, реализующий список туров
class TourList {
private:
    vector<Tour> tours;

public:
    //Добавление тура в список
    void addTour(const Tour& tour) {
        tours.push_back(tour);
        //Сортировка списка по цене после добавления нового элемента
        sort(tours.begin(), tours.end(), [](const Tour& a, const Tour& b) {
            return a.price < b.price;
            });
    }

    //Удаление тура по номеру позиции
    void removeTour(int position) {
        if (position < 0 || position >= tours.size()) {
            throw out_of_range("Позиция вне диапазона");
        }
        tours.erase(tours.begin() + position);
    }

    //Получение значения тура по номеру позиции
    Tour getTour(int position) {
        if (position < 0 || position >= tours.size()) {
            throw out_of_range("Позиция вне диапазона");
        }
        return tours[position];
    }

    //Проверка наличия тура с указанным направлением поездки
    vector<int> findToursByDestination(const string& destination) {
        vector<int> positions;
        for (size_t i = 0; i < tours.size(); ++i) {
            if (tours[i].destination == destination) {
                positions.push_back(i);
            }
        }
        return positions;
    }

    //Получение массива описаний туров, цена которых не превышает указанную
    vector<string> getToursDescriptionsByMaxPrice(double maxPrice) {
        vector<string> descriptions;
        for (const auto& tour : tours) {
            if (tour.price <= maxPrice) {
                descriptions.push_back(tour.destination);
            }
        }
        return descriptions;
    }
};

int main() {
    setlocale(LC_ALL, "Russian");
    try {
        TourList tourList;

        //добавление туров
        tourList.addTour({ "Париж", 5, 1000.0, 20 });
        tourList.addTour({ "Лондон", 7, 1500.0, 15 });
        tourList.addTour({ "Рим", 3, 800.0, 25 });
        tourList.addTour({ "Варшава", 2, 700.0, 7 });

        //удаление тура
        tourList.removeTour(1);

        //Пример получения тура по номеру позиции
        Tour tour = tourList.getTour(0);
        cout << "Направление тура: " << tour.destination << endl;

        //Пример поиска тура по направлению
        vector<int> positions = tourList.findToursByDestination("Париж");
        cout << "Туры с направлением в Париж найдены на позициях: ";
        for (int pos : positions) {
            cout << pos << " ";
        }
        cout << endl;

        //Пример получения туров по максимальной цене
        vector<string> descriptions = tourList.getToursDescriptionsByMaxPrice(1000.0);
        cout << "Туры с ценой <= 1000.0:" << endl;
        for (const auto& desc : descriptions) {
            cout << desc << ", ";
        }
        cout << endl;

    }
    catch (const exception& e) {
        cerr << "Произошло исключение: " << e.what() << endl;
    }

    return 0;
}
